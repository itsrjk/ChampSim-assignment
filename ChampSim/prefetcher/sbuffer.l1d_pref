#include "cache.h"

uint64_t buffer[8][4]= {0};
uint32_t buffer_lru[8]= {0};

void CACHE::l1d_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L1D sbuffer prefetcher" << endl;

    for (uint32_t i =0;i<8;i++){
        buffer_lru[i]=i;
    }
}

void update_buffer_lru(uint32_t index){

    for(uint32_t k=0;k<8;k++){
        if (buffer_lru[k]< buffer_lru[index]){
            buffer_lru[k]++;
        }
    }
            //promote to MRU position
            buffer_lru[index]=0;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
    //uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;

    DP ( if (warmup_complete[cpu]) {
    cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr>>LOG2_BLOCK_SIZE);
    cout << " pf_cl: " << (pf_addr>>LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit << " type: " << +type << endl; });

    if (cache_hit==0){
    //first check with the buffer if the stream exists by comparing with existing buffers
    uint32_t i=0;
    for (;i<8;i++){
        //if the address matches with the first line of one of the 8 streams
       //cout << "lru: " << buffer_lru[i] << " | buffer : " <<buffer[i][0] << endl;
        //cout << "addr: " << addr << " | buffer : " <<buffer[i][0] << endl;
        if (addr==buffer[i][0]){
            //fetch into cache
            prefetch_line(ip,addr,buffer[i][0],FILL_L1,0);
            
            //swap all elements by 1 index to the left
            // this array is acting like a fifo queue
            for (uint32_t j=0;j<2;j++){
                buffer[i][j]= buffer[i][j+1];
            }
            //last element will be the second last address +1
            buffer[i][3]= buffer[i][2]>>LOG2_BLOCK_SIZE;

            update_buffer_lru(i);
            break;
        }

    }

    //if none of the buffers had the stream, remove the lru stream and add this one
    if(i==8){
        uint32_t k =0;

        for (;k<8;k++){
            //find the victim stream in the buffer
            // it'll be the least recently used one
            if (buffer_lru[k]== 7){
                break;
            }
        }
        //the address k+1,k+2,k=3,k+4
        buffer[k][0]=addr>>LOG2_BLOCK_SIZE;
        for (uint32_t j=1;j<4;j++){
            //change on line 49 also
            buffer[k][j]=buffer[k][j-1]>>LOG2_BLOCK_SIZE;
        }
        update_buffer_lru(k);

        //cout << buffer[k][0] << ": "<<buffer[k][1] << endl;

    }
    }

}



void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1D next line prefetcher final stats" << endl;
}
